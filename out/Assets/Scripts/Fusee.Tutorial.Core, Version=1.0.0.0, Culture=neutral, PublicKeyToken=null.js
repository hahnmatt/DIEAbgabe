/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */ 
'use strict';
var $asm09 = JSIL.DeclareAssembly("Fusee.Tutorial.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Tutorial");
JSIL.DeclareNamespace("Fusee.Tutorial.Core");
/* class Fusee.Tutorial.Core.SceneOb */ 

(function SceneOb$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single")
      ]))) ();
  };


  function SceneOb__ctor () {
    this.Albedo = $S00().Construct(0.8, 0.8, 0.8);
    this.Pos = $T00().Zero.MemberwiseClone();
    this.Rot = $T00().Zero.MemberwiseClone();
    this.Pivot = $T00().Zero.MemberwiseClone();
    this.Scale = $T00().One.MemberwiseClone();
    this.ModelScale = $T00().One.MemberwiseClone();
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Core.SceneOb", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      SceneOb__ctor
    );

    $.Field({Static:false, Public:true }, "Mesh", $asm04.TypeRef("Fusee.Engine.Core.Mesh"));

    $.Field({Static:false, Public:true }, "Albedo", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Pos", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Rot", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Pivot", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Scale", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "ModelScale", $asm06.TypeRef("Fusee.Math.Core.float3"));

    $.Field({Static:false, Public:true }, "Children", $asm14.TypeRef("System.Collections.Generic.List`1", [$.Type]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.Tutorial */ 

(function Tutorial$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderCanvas)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.ShaderProgram)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Engine.Core.Mesh)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.Fusee.Tutorial.Core.SceneOb)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm09.Fusee.Tutorial.Core.SceneOb))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.Fusee.Math.Core.float3)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm14.System.Collections.Generic.List$b1.Of($asm09.Fusee.Tutorial.Core.SceneOb))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm14.System.Collections.Generic.IEnumerable$b1.Of($asm09.Fusee.Tutorial.Core.SceneOb))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.Fusee.Math.Core.float4)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm14.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm14.System.Predicate$b1.Of($asm07.Fusee.Serialization.MeshComponent))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.Fusee.Serialization.SceneContainer)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Fusee.Base.Core.AssetStorage)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm14.System.Collections.Generic.IEnumerable$b1.Of($asm07.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm09.Fusee.Tutorial.Core.Tutorial_$l$gc)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.Fusee.Serialization.MeshComponent)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm11.System.Linq.Enumerable)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0B.Fusee.Xene.SceneFinderExtensions)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.Fusee.Math.Core.float4x4)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm03.Fusee.Engine.Common.ClearFlags)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm06.Fusee.Math.Core.float2)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Fusee.Engine.Core.MouseDevice)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm04.Fusee.Engine.Core.Input)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm04.Fusee.Engine.Core.TouchDevice)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm03.Fusee.Engine.Common.TouchPoints)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm14.System.Boolean)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm14.System.Single)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm14.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float3"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm14.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("Fusee.Tutorial.Core.SceneOb")]), [$asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("Fusee.Tutorial.Core.SceneOb")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Fusee.Math.Core.float4"), [
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single"), 
        $asm14.TypeRef("System.Single"), $asm14.TypeRef("System.Single")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Boolean"), [$asm07.TypeRef("Fusee.Serialization.MeshComponent")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm14.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm14.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("Fusee.Serialization.SceneNodeContainer")]), $asm14.TypeRef("System.Predicate`1", ["!!0"])], ["TComponent"]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float4x4"), [$asm06.TypeRef("Fusee.Math.Core.float4x4"), $asm06.TypeRef("Fusee.Math.Core.float4x4")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float4x4"), [$asm06.TypeRef("Fusee.Math.Core.float3")]))) ();
  };


  function Tutorial__ctor () {
    this._alpha = 0.001;
    $T00().prototype._ctor.call(this);
  }; 

  function Tutorial_Init () {
    var shaderProgram = (this.RenderCanvas$RC$value).CreateShader("\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;\r\n            uniform mat4 FUSEE_MVP;\r\n            uniform mat4 FUSEE_ITMV;\r\n            varying vec3 modelpos;\r\n            varying vec3 normal;\r\n            void main()\r\n            {\r\n                modelpos = fuVertex;\r\n                normal = normalize(mat3(FUSEE_ITMV) * fuNormal);\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n            }", "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif\r\n            varying vec3 modelpos;\r\n            varying vec3 normal;\r\n            uniform vec3 albedo;\r\n\r\n            void main()\r\n            {\r\n                float intensity = dot(normal, vec3(0, 0, -1));\r\n                gl_FragColor = vec4(intensity * albedo, 1);\r\n            }");
    (this.RenderCanvas$RC$value).SetShader(shaderProgram);
    this._albedoParam = (this.RenderCanvas$RC$value).GetShaderParam(shaderProgram, "albedo");
    var mesh = $thisType.LoadMesh("Cone.fus");
    var mesh2 = $thisType.LoadMesh("Cube.fus");
    var mesh3 = $thisType.LoadMesh("Cylinder.fus");
    var mesh4 = $thisType.LoadMesh("Pyramid.fus");
    var mesh5 = $thisType.LoadMesh("Sphere.fus");
    var sceneOb = new ($T04())();
    var expr_84 = JSIL.Array.New($T04(), 8);
    var expr_8B = new ($T04())();
    expr_8B.Mesh = mesh2;
    expr_8B.Pos = $S00().Construct(0, 2.75, 0);
    expr_8B.ModelScale = $S00().Construct(0.5, 1, 0.25);
    expr_84[0] = expr_8B;
    var expr_CE = new ($T04())();
    expr_CE.Mesh = mesh3;
    expr_CE.Pos = $S00().Construct(-0.25, 1, 0);
    expr_CE.ModelScale = $S00().Construct(0.15, 1, 0.15);
    expr_84[1] = expr_CE;
    var expr_111 = new ($T04())();
    expr_111.Mesh = mesh3;
    expr_111.Pos = $S00().Construct(0.25, 1, 0);
    expr_111.ModelScale = $S00().Construct(0.15, 1, 0.15);
    expr_84[2] = expr_111;
    var expr_154 = new ($T04())();
    expr_154.Mesh = mesh5;
    expr_154.Pos = $S00().Construct(-0.75, 3.5, 0);
    expr_154.ModelScale = $S00().Construct(0.25, 0.25, 0.25);
    expr_84[3] = expr_154;
    var expr_198 = new ($T04())();
    expr_198.Mesh = mesh5;
    expr_198.Pos = $S00().Construct(0.75, 3.5, 0);
    expr_198.ModelScale = $S00().Construct(0.25, 0.25, 0.25);
    expr_84[4] = expr_198;
    var expr_1DC = new ($T04())();
    expr_1DC.Mesh = mesh3;
    expr_1DC.Pos = $S00().Construct(-0.75, 2.5, 0);
    expr_1DC.ModelScale = $S00().Construct(0.15, 1, 0.15);
    expr_84[5] = expr_1DC;
    var expr_21F = new ($T04())();
    expr_21F.Mesh = mesh3;
    expr_21F.Pos = $S00().Construct(0.75, 2.5, 0);
    expr_21F.ModelScale = $S00().Construct(0.15, 1, 0.15);
    expr_84[6] = expr_21F;
    var expr_262 = new ($T04())();
    expr_262.Mesh = mesh5;
    expr_262.Pos = $S00().Construct(0, 4.2, 0);
    expr_262.ModelScale = $S00().Construct(0.35, 0.5, 0.35);
    expr_262.Albedo = $S00().Construct(0.9, 0.6, 0.5);
    expr_84[7] = expr_262;
    sceneOb.Children = $S01().Construct($T08().$Cast(expr_84));
    this._root = sceneOb;
    (this.RenderCanvas$RC$value.ClearColor = $S02().Construct(1, 1, 1, 1));
  }; 

  function Tutorial_LoadMesh (assetName) {
    var arg_2D_1 = null;
    var sceneContainer = $T0D().Get$b1($T0C())(assetName);
    var arg_2D_0 = sceneContainer.Children;
    if ((arg_2D_1 = $T0F().$l$g9__7_0) === null) {
      arg_2D_1 = $T0F().$l$g9__7_0 = $T0B().New($T0F().$l$g9, null, new JSIL.MethodPointerInfo($asm09.Fusee.Tutorial.Core.Tutorial_$l$gc, "$lLoadMesh$gb__7_0", $S03(), false, false));
    }
    var meshComponent = $S04().CallStatic($T11(), "First$b1", [$asm07.Fusee.Serialization.MeshComponent], $S05().CallStatic($T12(), "FindComponents$b1", [$asm07.Fusee.Serialization.MeshComponent], arg_2D_0, arg_2D_1));
    var expr_3D = new ($T03())();
    expr_3D.set_Vertices(meshComponent.Vertices);
    expr_3D.set_Normals(meshComponent.Normals);
    expr_3D.set_Triangles(meshComponent.Triangles);
    return expr_3D;
  }; 

  function Tutorial_ModelXForm (pos, rot, pivot) {
    return $S06().CallStatic($T13(), "op_Multiply", null, 
      $S06().CallStatic($T13(), "op_Multiply", null, 
        $S06().CallStatic($T13(), "op_Multiply", null, 
          $S06().CallStatic($T13(), "op_Multiply", null, 
            $T13().CreateTranslation($T06().op_Addition(pos.MemberwiseClone(), pivot).MemberwiseClone()).MemberwiseClone(), 
            $T13().CreateRotationY(rot.y).MemberwiseClone()
          ).MemberwiseClone(), 
          $T13().CreateRotationX(rot.x).MemberwiseClone()
        ).MemberwiseClone(), 
        $T13().CreateRotationZ(rot.z).MemberwiseClone()
      ).MemberwiseClone(), 
      $T13().CreateTranslation($T06().op_UnaryNegation(pivot.MemberwiseClone()).MemberwiseClone()).MemberwiseClone()
    );
  }; 

  function Tutorial_RenderAFrame () {
    (this.RenderCanvas$RC$value).Clear($T14().$Flags("Color", "Depth"));
    var float = $T15().op_Addition(
      $T17().get_Mouse().get_Velocity().MemberwiseClone(), 
      $T17().get_Touch().GetVelocity($T19().Touchpoint_0)
    );
    var flag = $T17().get_Mouse().get_LeftButton() || 
    $T17().get_Touch().GetTouchActive($T19().Touchpoint_0);
    if (flag) {
      this._alpha = +this._alpha - (+float.x * 0.0001);
      this._beta = +this._beta - (+float.y * 0.0001);
    }
    var aspect = +((+(this.get_Width()) / +(this.get_Height())));
    (this.RenderCanvas$RC$value.Projection = $T13().CreatePerspectiveFieldOfView(0.785398, aspect, 0.01, 20).MemberwiseClone());
    var modelView = $S06().CallStatic($T13(), "op_Multiply", null, 
      $S06().CallStatic($T13(), "op_Multiply", null, 
        $S06().CallStatic($T13(), "op_Multiply", null, 
          $T13().CreateTranslation(0, 0, 8).MemberwiseClone(), 
          $T13().CreateRotationY(this._alpha).MemberwiseClone()
        ).MemberwiseClone(), 
        $T13().CreateRotationX(this._beta).MemberwiseClone()
      ).MemberwiseClone(), 
      $T13().CreateTranslation(0, -2, 0).MemberwiseClone()
    ).MemberwiseClone();
    this.RenderSceneOb(this._root, modelView.MemberwiseClone());
    this.Present();
  }; 

  function Tutorial_RenderSceneOb (so, modelView) {
    var $temp00;
    modelView = $S06().CallStatic($T13(), "op_Multiply", null, 
      $S06().CallStatic($T13(), "op_Multiply", null, modelView.MemberwiseClone(), $thisType.ModelXForm(so.Pos.MemberwiseClone(), so.Rot.MemberwiseClone(), so.Pivot.MemberwiseClone()).MemberwiseClone()).MemberwiseClone(), 
      $S07().CallStatic($T13(), "CreateScale", null, so.Scale.MemberwiseClone()).MemberwiseClone()
    ).MemberwiseClone();
    var flag = so.Mesh !== null;
    if (flag) {
      (this.RenderCanvas$RC$value.ModelView = $S06().CallStatic($T13(), "op_Multiply", null, modelView.MemberwiseClone(), $S07().CallStatic($T13(), "CreateScale", null, so.ModelScale.MemberwiseClone()).MemberwiseClone()).MemberwiseClone());
      (this.RenderCanvas$RC$value).SetShaderParam3f(this._albedoParam, so.Albedo.MemberwiseClone());
      (this.RenderCanvas$RC$value).Render(so.Mesh);
    }
    var flag2 = so.Children !== null;
    if (flag2) {

      for (var a$0 = so.Children._items, i$0 = 0, l$0 = (so.Children._size | 0); i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var current = a$0[i$0];
        this.RenderSceneOb(current, modelView.MemberwiseClone());
      }
    }
  }; 

  function Tutorial_Resize () {
    (this.RenderCanvas$RC$value).Viewport(
      0, 
      0, 
      this.get_Width(), 
      this.get_Height()
    );
    var aspect = +((+(this.get_Width()) / +(this.get_Height())));
    var projection = $T13().CreatePerspectiveFieldOfView(0.785398, aspect, 1, 20000);
    (this.RenderCanvas$RC$value.Projection = projection.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.RenderCanvas"), 
      Name: "Fusee.Tutorial.Core.Tutorial", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Tutorial__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Void, 
      Tutorial_Init
    );

    $.Method({Static:true , Public:true }, "LoadMesh", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Engine.Core.Mesh"), [$.String]), 
      Tutorial_LoadMesh
    );

    $.Method({Static:true , Public:false}, "ModelXForm", 
      new JSIL.MethodSignature($asm06.TypeRef("Fusee.Math.Core.float4x4"), [
          $asm06.TypeRef("Fusee.Math.Core.float3"), $asm06.TypeRef("Fusee.Math.Core.float3"), 
          $asm06.TypeRef("Fusee.Math.Core.float3")
        ]), 
      Tutorial_ModelXForm
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RenderAFrame", 
      JSIL.MethodSignature.Void, 
      Tutorial_RenderAFrame
    );

    $.Method({Static:false, Public:false}, "RenderSceneOb", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("Fusee.Tutorial.Core.SceneOb"), $asm06.TypeRef("Fusee.Math.Core.float4x4")]), 
      Tutorial_RenderSceneOb
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Resize", 
      JSIL.MethodSignature.Void, 
      Tutorial_Resize
    );

    $.Field({Static:false, Public:false}, "_mesh", $asm04.TypeRef("Fusee.Engine.Core.Mesh"));

    $.Constant({Static:true , Public:false}, "_vertexShader", $.String, "\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;\r\n            uniform mat4 FUSEE_MVP;\r\n            uniform mat4 FUSEE_ITMV;\r\n            varying vec3 modelpos;\r\n            varying vec3 normal;\r\n            void main()\r\n            {\r\n                modelpos = fuVertex;\r\n                normal = normalize(mat3(FUSEE_ITMV) * fuNormal);\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n            }");

    $.Constant({Static:true , Public:false}, "_pixelShader", $.String, "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif\r\n            varying vec3 modelpos;\r\n            varying vec3 normal;\r\n            uniform vec3 albedo;\r\n\r\n            void main()\r\n            {\r\n                float intensity = dot(normal, vec3(0, 0, -1));\r\n                gl_FragColor = vec4(intensity * albedo, 1);\r\n            }");

    $.Field({Static:false, Public:false}, "_albedoParam", $asm03.TypeRef("Fusee.Engine.Common.IShaderParam"));

    $.Field({Static:false, Public:false}, "_alpha", $.Single);

    $.Field({Static:false, Public:false}, "_beta", $.Single);

    $.Field({Static:false, Public:false}, "_root", $asm09.TypeRef("Fusee.Tutorial.Core.SceneOb"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("Fusee.Engine.Common.FuseeApplicationAttribute"));

})();

/* class Fusee.Tutorial.Core.Tutorial+<>c */ 

(function $l$gc$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.Fusee.Serialization.MeshComponent)) ();
  };


  function $l$gc__ctor () {
  }; 

  function $l$gc_$lLoadMesh$gb__7_0 (c) {
    return true;
  }; 

  JSIL.MakeType({
      BaseType: $asm14.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Core.Tutorial+<>c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__ctor
    );

    $.Method({Static:false, Public:false}, "$lLoadMesh$gb__7_0", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("Fusee.Serialization.MeshComponent")]), 
      $l$gc_$lLoadMesh$gb__7_0
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "$l$g9", $.Type);

    $.Field({Static:true , Public:true }, "$l$g9__7_0", $asm14.TypeRef("System.Predicate`1", [$asm07.TypeRef("Fusee.Serialization.MeshComponent")]));


    function $l$gc__cctor () {
      $thisType.$l$g9 = new $thisType();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      $l$gc__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm14.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

